import streamlit as st
import pandas as pd
import tempfile
from datetime import datetime, date, time
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from oauth2client.client import OAuth2Credentials
import httplib2
from openai import OpenAI
from io import BytesIO
from docx import Document
from docx.shared import Pt
import plotly.express as px
import re

st.set_page_config(page_title="Timesheet Fiscal", layout="wide")
st.write("Hoje:", pd.Timestamp.today())

# -----------------------------
# Valida√ß√£o Usu√°rios
# -----------------------------

@st.cache_data
def carregar_usuarios():
    usuarios_config = st.secrets.get("users", {})
    usuarios = {}
    for user, dados in usuarios_config.items():
        try:
            nome, senha = dados.split("|", 1)
            usuarios[user] = {"name": nome, "password": senha}
        except:
            st.warning(f"Erro ao carregar usu√°rio '{user}' nos secrets.")
    return usuarios

users = carregar_usuarios()

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = ""

if not st.session_state.logged_in:
    st.title("üîê Login")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        user = users.get(username)
        if user and user["password"] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.success(f"Bem-vindo, {user['name']}!")
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos.")
    st.stop()

st.sidebar.image("PRIO_SEM_POLVO_PRIO_PANTONE_LOGOTIPO_Azul.png")
nome_usuario = users[st.session_state.username]["name"]
st.sidebar.success(f"Logado como: {nome_usuario}")
if st.sidebar.button("Logout"):
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.rerun()
    
admin_users = ["cvieira", "wreis", "waraujo", "iassis"]

# -----------------------------
# Fun√ß√µes Auxiliares
# -----------------------------

def conectar_drive():
    cred_dict = st.secrets["credentials"]
    credentials = OAuth2Credentials(
        access_token=cred_dict["access_token"],
        client_id=cred_dict["client_id"],
        client_secret=cred_dict["client_secret"],
        refresh_token=cred_dict["refresh_token"],
        token_expiry=datetime.strptime(cred_dict["token_expiry"], "%Y-%m-%dT%H:%M:%SZ"),
        token_uri=cred_dict["token_uri"],
        user_agent="streamlit-app/1.0",
        revoke_uri=cred_dict["revoke_uri"]
    )

    http = httplib2.Http()

    try:
        credentials.refresh(http)
    except Exception as e:
        st.error(f"Erro ao atualizar credenciais: {e}")

    gauth = GoogleAuth()
    gauth.credentials = credentials
    drive = GoogleDrive(gauth)
    return drive

def obter_pasta_ts_fiscal(drive):
    # Verifica se a pasta 'ts-fiscal' existe
    lista = drive.ListFile({
        'q': "title='ts-fiscal' and mimeType='application/vnd.google-apps.folder' and trashed=false"
    }).GetList()

    if lista:
        return lista[0]['id']
    else:
        # Cria a pasta caso n√£o exista
        pasta = drive.CreateFile({
            'title': 'ts-fiscal',
            'mimeType': 'application/vnd.google-apps.folder'
        })
        pasta.Upload()
        return pasta['id']

def carregar_arquivo(nome_arquivo, colunas):
    drive = conectar_drive()
    pasta_id = obter_pasta_ts_fiscal(drive)

    try:
        arquivos = drive.ListFile({
            'q': f"'{pasta_id}' in parents and title = '{nome_arquivo}' and trashed=false"
        }).GetList()
    except Exception as e:
        st.error(f"‚ùå Erro ao acessar o Drive: {e}")
        st.stop()

    if not arquivos:
        st.error(f"‚ùå Arquivo '{nome_arquivo}' n√£o encontrado no Google Drive.\nOpera√ß√£o interrompida para evitar sobrescrita acidental.")
        st.stop()

    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
    arquivos[0].GetContentFile(caminho_temp)
    df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")

    # Seguran√ßa extra: se vier vazio e n√£o deveria
    if df.empty:
        st.warning("‚ö†Ô∏è A base foi carregada mas est√° vazia. Verifique o hist√≥rico de vers√µes no Google Drive.")

    return df

    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
    arquivos[0].GetContentFile(caminho_temp)
    df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
    return df

def salvar_arquivo(df, nome_arquivo):
    df.to_csv(nome_arquivo, sep=";", index=False, encoding="utf-8-sig")
    drive = conectar_drive()
    pasta_id = obter_pasta_ts_fiscal(drive)

    arquivos = drive.ListFile({
        'q': f"'{pasta_id}' in parents and title = '{nome_arquivo}' and trashed=false"
    }).GetList()

    if arquivos:
        arquivo = arquivos[0]
    else:
        arquivo = drive.CreateFile({
            'title': nome_arquivo,
            'parents': [{'id': pasta_id}]
        })

    arquivo.SetContentFile(nome_arquivo)
    arquivo.Upload()
    salvar_backup_redundante(df, nome_base=nome_arquivo)

def carregar_empresas():
    drive = conectar_drive()
    pasta_id = obter_pasta_ts_fiscal(drive)

    arquivos = drive.ListFile({
        'q': f"'{pasta_id}' in parents and title = 'empresas.csv' and trashed=false"
    }).GetList()

    if not arquivos:
        df = pd.DataFrame(columns=["Codigo SAP", "Nome Empresa", "Descri√ß√£o"])
        df.to_csv("empresas.csv", sep=";", index=False, encoding="utf-8-sig")
        arquivo = drive.CreateFile({
            'title': 'empresas.csv',
            'parents': [{'id': pasta_id}]
        })
        arquivo.SetContentFile("empresas.csv")
        arquivo.Upload()
        return df

    caminho_temp = tempfile.NamedTemporaryFile(delete=False).name
    arquivos[0].GetContentFile(caminho_temp)
    df = pd.read_csv(caminho_temp, sep=";", encoding="utf-8-sig")
    return df

def salvar_empresas(df):
    df.to_csv("empresas.csv", sep=";", index=False, encoding="utf-8-sig")
    drive = conectar_drive()
    pasta_id = obter_pasta_ts_fiscal(drive)

    arquivos = drive.ListFile({
        'q': f"'{pasta_id}' in parents and title = 'empresas.csv' and trashed=false"
    }).GetList()

    if arquivos:
        arquivo = arquivos[0]
    else:
        arquivo = drive.CreateFile({
            'title': 'empresas.csv',
            'parents': [{'id': pasta_id}]
        })

    arquivo.SetContentFile("empresas.csv")
    arquivo.Upload()

def formatar_horas(horas_input):
    if not horas_input:
        return None

    horas_input = horas_input.strip().replace(",", ".")  # troca v√≠rgula por ponto
    pattern_hhmm = re.fullmatch(r"(\d{1,2})[:;.,](\d{1,2})", horas_input)

    # Caso esteja no formato HH:MM ou semelhante
    if pattern_hhmm:
        h, m = map(int, pattern_hhmm.groups())
        if 0 <= h < 24 and 0 <= m < 60:
            return f"{h:02d}:{m:02d}"

    # Caso seja decimal (ex: 0.25 ou 1.5)
    try:
        decimal = float(horas_input)
        total_minutos = int(round(decimal * 60))
        h = total_minutos // 60
        m = total_minutos % 60
        return f"{h:02d}:{m:02d}"
    except:
        return None
        
def normalizar_coluna_horas(df, coluna="Horas Gastas"):
    df[coluna] = df[coluna].astype(str).apply(formatar_horas)
    return df

def padronizar_coluna_data(df, coluna="Data"):
    df[coluna] = pd.to_datetime(df[coluna], errors="coerce", dayfirst=True)
    df = df[df[coluna].notnull()]  # remove linhas com datas inv√°lidas
    df[coluna] = df[coluna].dt.strftime("%d/%m/%Y")
    return df
    
def salvar_backup_redundante(df, nome_base="timesheet.csv"):
    from pathlib import Path

    # 1. Conecta ao Google Drive
    drive = conectar_drive()
    pasta_principal_id = obter_pasta_ts_fiscal(drive)

    # 2. Verifica se a subpasta "Backup" existe
    lista = drive.ListFile({
        'q': f"'{pasta_principal_id}' in parents and title='Backup' and mimeType='application/vnd.google-apps.folder' and trashed=false"
    }).GetList()

    if lista:
        pasta_backup_id = lista[0]['id']
    else:
        # Cria a pasta de backup dentro de ts-fiscal
        pasta = drive.CreateFile({
            'title': 'Backup',
            'mimeType': 'application/vnd.google-apps.folder',
            'parents': [{'id': pasta_principal_id}]
        })
        pasta.Upload()
        pasta_backup_id = pasta['id']

    # 3. Descobre o pr√≥ximo n√∫mero sequencial dispon√≠vel
    arquivos_backup = drive.ListFile({
        'q': f"'{pasta_backup_id}' in parents and title contains 'timesheet(' and trashed=false"
    }).GetList()

    padrao = re.compile(r"timesheet\((\d+)\)\.csv$")
    numeros_existentes = [
        int(match.group(1)) for arq in arquivos_backup
        if (match := padrao.search(arq['title']))
    ]
    proximo_numero = max(numeros_existentes, default=0) + 1

    nome_versao = f"timesheet({proximo_numero}).csv"

    # 4. Salva CSV temporariamente
    caminho_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".csv").name
    df.to_csv(caminho_temp, sep=";", index=False, encoding="utf-8-sig")

    # 5. Envia ao Drive
    arquivo_backup = drive.CreateFile({
        'title': nome_versao,
        'parents': [{'id': pasta_backup_id}]
    })
    arquivo_backup.SetContentFile(caminho_temp)
    arquivo_backup.Upload()

# -----------------------------
# Menu Latereal
# -----------------------------

st.sidebar.title("üìã Menu")

menu = st.sidebar.radio("Navegar para:", [
    "üè† Dashboard",
    "üè¢ Cadastro de Empresas",
    "üóÇÔ∏è Cadastro de Projetos e Atividades",
    "üìù Lan√ßamento de Timesheet",
    "üìÑ Visualizar / Editar Timesheet",
    "üìä Avalia√ß√£o de Performance ‚Äî IA"
])

# -----------------------------
# Conte√∫do das P√°ginas
# -----------------------------

if menu == "üè† Dashboard":
    st.title("üìä Painel de KPIs do Timesheet")

    # üîó Carregar Dados
    df_timesheet = carregar_arquivo(
        "timesheet.csv",
        ["Usu√°rio", "Nome", "Data", "Empresa", "Projeto", "Time", "Atividade", "Quantidade", "Horas Gastas", "Observa√ß√µes"]
    )
    df_timesheet = normalizar_coluna_horas(df_timesheet)
    df_timesheet = padronizar_coluna_data(df_timesheet)

    if df_timesheet.empty:
        st.info("‚ö†Ô∏è N√£o h√° dados no timesheet para gerar dashboard.")
        st.stop()
    
    # Tratamento de datas
    df_timesheet["Data"] = pd.to_datetime(df_timesheet["Data"], dayfirst=True).dt.strftime("%d/%m/%Y")
    
    # üî¢ Convers√£o de Horas
    def converter_para_horas(horas_str):
        try:
            h, m = map(int, horas_str.strip().split(":"))
            return h + m / 60
        except:
            return 0
    
    df_timesheet["Horas"] = df_timesheet["Horas Gastas"].apply(converter_para_horas)
    
    # üîç Filtros
    st.sidebar.subheader("üîç Filtros")
    df_timesheet["Data"] = pd.to_datetime(df_timesheet["Data"], dayfirst=True, errors="coerce")
    data_inicial, data_final = st.sidebar.date_input(
        "Per√≠odo:",
        [df_timesheet["Data"].min().date(), df_timesheet["Data"].max().date()]
    )
    
    empresa = st.sidebar.selectbox(
        "Empresa:",
        ["Todas"] + sorted(df_timesheet["Empresa"].dropna().unique().tolist())
    )
    
    projeto = st.sidebar.selectbox(
        "Projeto:",
        ["Todos"] + sorted(df_timesheet["Projeto"].dropna().unique().tolist())
    )

    time = st.sidebar.selectbox(
        "Time:",
        ["Todos"] + sorted(df_timesheet["Time"].dropna().unique().tolist())
    )

    atividade = st.sidebar.selectbox(
        "Atividade:",
        ["Todas"] + sorted(df_timesheet["Atividade"].dropna().unique().tolist())
    )
    
    # Aplicar filtros
    df_filtrado = df_timesheet[
        (df_timesheet["Data"].dt.date >= data_inicial) &
        (df_timesheet["Data"].dt.date <= data_final)
    ]
    
    if empresa != "Todas":
        df_filtrado = df_filtrado[df_filtrado["Empresa"] == empresa]
    
    if projeto != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Projeto"] == projeto]

    if time != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Time"] == time]

    if atividade != "Todas":
        df_filtrado = df_filtrado[df_filtrado["Atividade"] == atividade]
    
    # üöÄ KPIs
    total_horas = df_filtrado["Horas"].sum()
    total_registros = len(df_filtrado)
    total_colaboradores = df_filtrado["Nome"].nunique()
    total_projetos = df_filtrado["Projeto"].nunique()
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("‚è∞ Total de Horas", f"{total_horas:.2f}")
    col2.metric("üìÑ Total Registros", total_registros)
    col3.metric("üë§ Colaboradores", total_colaboradores)
    col4.metric("üèóÔ∏è Projetos", total_projetos)
    
    # üìä Gr√°ficos
    
    # üî∏ Horas por Projeto
    st.subheader("üèóÔ∏è Horas por Projeto")
    if not df_filtrado.empty:
        grafico_projeto = df_filtrado.groupby("Projeto")["Horas"].sum().reset_index().sort_values(by="Horas", ascending=False)
        fig = px.bar(
            grafico_projeto,
            x="Projeto",
            y="Horas",
            title=None,
            text_auto='.2s'
        )
        st.plotly_chart(fig, use_container_width=True)

    # üî∏ Horas por Time
    st.subheader("üöÄ Horas por Time")
    if not df_filtrado.empty:
        grafico_time = df_filtrado.groupby("Time")["Horas"].sum().reset_index().sort_values(by="Horas", ascending=False)
        fig = px.bar(
            grafico_time,
            x="Time",
            y="Horas",
            title=None,
            text_auto='.2s'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # üî∏ Horas por Atividade
    st.subheader("üóíÔ∏è Horas por Atividade")
    grafico_atividade = df_filtrado.groupby("Atividade")["Horas"].sum().reset_index().sort_values(by="Horas", ascending=False)
    fig = px.bar(
        grafico_atividade,
        x="Atividade",
        y="Horas",
        title=None,
        text_auto='.2s'
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # üî∏ Horas por Empresa
    st.subheader("üè¢ Horas por Empresa")
    grafico_empresa = df_filtrado.groupby("Empresa")["Horas"].sum().reset_index().sort_values(by="Horas", ascending=False)
    fig = px.pie(
        grafico_empresa,
        names="Empresa",
        values="Horas",
        title=None,
        hole=0.4
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # üî∏ Horas por Colaborador
    st.subheader("üë§ Horas por Colaborador")
    grafico_colab = df_filtrado.groupby("Nome")["Horas"].sum().reset_index().sort_values(by="Horas", ascending=False)
    fig = px.bar(
        grafico_colab,
        x="Nome",
        y="Horas",
        title=None,
        text_auto='.2s'
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # üî∏ Evolu√ß√£o Temporal (Somente por dia, sem horas)
    st.subheader("üìÖ Evolu√ß√£o de Horas no Tempo (Por Dia)")
    
    grafico_tempo = df_filtrado.groupby(df_filtrado["Data"].dt.date)["Horas"].sum().reset_index()
    grafico_tempo.rename(columns={"Data": "Dia"}, inplace=True)
    
    fig = px.line(
        grafico_tempo,
        x="Dia",
        y="Horas",
        title=None,
        markers=True
    )
    
    fig.update_xaxes(
        type='category',
        title="Data"
    )
    
    fig.update_yaxes(title="Horas")
    
    st.plotly_chart(fig, use_container_width=True)

# -----------------------------
# Menu Cadastro de Empresa
# -----------------------------

elif menu == "üè¢ Cadastro de Empresas":
    st.title("üè¢ Cadastro de Empresas (C√≥digos SAP)")
    st.subheader("üì• Inserir nova empresa")

    with st.form("form_empresa"):
        col1, col2 = st.columns([2, 4])
        with col1:
            codigo = st.text_input("C√≥digo SAP")
        with col2:
            nome = st.text_input("Nome da Empresa")
    
        descricao = st.text_area("Descri√ß√£o (opcional)", height=100)
    
        submitted = st.form_submit_button("üíæ Salvar Empresa")
        if submitted:
            if not codigo or not nome:
                st.warning("‚ö†Ô∏è C√≥digo SAP e Nome s√£o obrigat√≥rios.")
            else:
                df = carregar_empresas()
                if codigo in df["Codigo SAP"].values:
                    st.warning("‚ö†Ô∏è J√° existe uma empresa cadastrada com este C√≥digo SAP.")
                else:
                    nova = pd.DataFrame({
                        "Codigo SAP": [codigo.strip()],
                        "Nome Empresa": [nome.strip()],
                        "Descri√ß√£o": [descricao.strip()]
                    })
                    df = pd.concat([df, nova], ignore_index=True)
                    salvar_empresas(df)
                    st.success("‚úÖ Empresa cadastrada com sucesso!")
    
    # üìÑ Empresas Cadastradas
    st.markdown("---")
    st.markdown("### üè¢ Empresas Cadastradas")
    
    df_empresas = carregar_empresas()
    
    st.dataframe(df_empresas, use_container_width=True)
    
    # üõ†Ô∏è Edi√ß√£o e Exclus√£o
    st.markdown("---")
    st.markdown("### üõ†Ô∏è Editar ou Excluir Empresa")
    
    if not df_empresas.empty:
        empresa_selecionada = st.selectbox(
            "Selecione a empresa pelo C√≥digo SAP:",
            df_empresas["Codigo SAP"]
        )
    
        empresa_info = df_empresas[df_empresas["Codigo SAP"] == empresa_selecionada].iloc[0]
    
        novo_nome = st.text_input("Novo Nome da Empresa", value=empresa_info["Nome Empresa"])
        nova_descricao = st.text_area("Nova Descri√ß√£o", value=empresa_info["Descri√ß√£o"])
    
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úèÔ∏è Atualizar Empresa"):
                df_empresas.loc[df_empresas["Codigo SAP"] == empresa_selecionada, "Nome Empresa"] = novo_nome.strip()
                df_empresas.loc[df_empresas["Codigo SAP"] == empresa_selecionada, "Descri√ß√£o"] = nova_descricao.strip()
                salvar_empresas(df_empresas)
                st.success("‚úÖ Empresa atualizada com sucesso!")
                st.experimental_rerun()
    
        with col2:
            if st.button("üóëÔ∏è Excluir Empresa"):
                confirmar = st.radio("‚ö†Ô∏è Tem certeza que deseja excluir?", ["N√£o", "Sim"], horizontal=True)
                if confirmar == "Sim":
                    df_empresas = df_empresas[df_empresas["Codigo SAP"] != empresa_selecionada]
                    salvar_empresas(df_empresas)
                    st.success("‚úÖ Empresa exclu√≠da com sucesso!")
                    st.experimental_rerun()
    else:
        st.info("üö© Nenhuma empresa cadastrada at√© o momento.")
            
# -----------------------------
# Menu Cadastro de Projeto
# -----------------------------

elif menu == "üóÇÔ∏è Cadastro de Projetos e Atividades":
    st.title("üóÇÔ∏è Cadastro de Projetos e Atividades")
    st.markdown("## üèóÔ∏è Projetos")

    df_projetos = carregar_arquivo("projetos.csv", ["Nome Projeto", "Time", "Status"])
    
    with st.form("form_projeto"):
        nome_projeto = st.text_input("Nome do Projeto")
        descricao_projeto = st.selectbox("Time", ["Ambos", "Diretos", "Indiretos"])
        status_projeto = st.selectbox("Status do Projeto", ["N√£o Iniciado", "Em Andamento", "Conclu√≠do"])
    
        submitted = st.form_submit_button("üíæ Salvar Projeto")
        if submitted:
            if not nome_projeto:
                st.warning("‚ö†Ô∏è O nome do projeto √© obrigat√≥rio.")
            else:
                if nome_projeto in df_projetos["Nome Projeto"].values:
                    st.warning("‚ö†Ô∏è J√° existe um projeto com este nome.")
                else:
                    novo = pd.DataFrame({
                        "Nome Projeto": [nome_projeto.strip()],
                        "Time": [descricao_projeto.strip()],
                        "Status": [status_projeto]
                    })
                    df_projetos = pd.concat([df_projetos, novo], ignore_index=True)
                    salvar_arquivo(df_projetos, "projetos.csv")
                    st.success("‚úÖ Projeto cadastrado com sucesso!")
    
    st.dataframe(df_projetos, use_container_width=True)
    
    # üõ†Ô∏è Edi√ß√£o e Exclus√£o de Projeto
    st.markdown("### üîß Editar ou Excluir Projeto")
    if not df_projetos.empty:
        projeto_selecionado = st.selectbox("Selecione o Projeto:", df_projetos["Nome Projeto"])
    
        projeto_info = df_projetos[df_projetos["Nome Projeto"] == projeto_selecionado].iloc[0]
    
        novo_nome = st.text_input("Novo Nome do Projeto", value=projeto_info["Nome Projeto"])
        nova_desc = st.selectbox("Alterar Time", ["Ambos", "Diretos", "Indiretos"], index=["Ambos", "Diretos", "Indiretos"].index(projeto_info["Time"]))
        novo_status = st.selectbox("Novo Status", ["N√£o Iniciado", "Em Andamento", "Conclu√≠do"], index=["N√£o Iniciado", "Em Andamento", "Conclu√≠do"].index(projeto_info["Status"]))
    
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úèÔ∏è Atualizar Projeto"):
                df_projetos.loc[df_projetos["Nome Projeto"] == projeto_selecionado, "Nome Projeto"] = novo_nome.strip()
                df_projetos.loc[df_projetos["Nome Projeto"] == projeto_selecionado, "Time"] = nova_desc.strip()
                df_projetos.loc[df_projetos["Nome Projeto"] == projeto_selecionado, "Status"] = novo_status
                salvar_arquivo(df_projetos, "projetos.csv")
                st.success("‚úÖ Projeto atualizado com sucesso!")
                st.experimental_rerun()
    
        with col2:
            if st.button("üóëÔ∏è Excluir Projeto"):
                confirmar = st.radio("‚ö†Ô∏è Tem certeza que deseja excluir?", ["N√£o", "Sim"], horizontal=True)
                if confirmar == "Sim":
                    df_projetos = df_projetos[df_projetos["Nome Projeto"] != projeto_selecionado]
                    salvar_arquivo(df_projetos, "projetos.csv")
                    st.success("‚úÖ Projeto exclu√≠do com sucesso!")
                    st.experimental_rerun()
    
    # üî∏ ATIVIDADES
    st.markdown("---")
    st.markdown("## üóíÔ∏è Atividades")
    
    df_atividades = carregar_arquivo("atividades.csv", ["Nome Atividade", "Projeto Vinculado", "Descri√ß√£o", "Status"])
    
    with st.form("form_atividade"):
        nome_atividade = st.text_input("Nome da Atividade")
        projeto_vinculado = st.selectbox("Projeto Vinculado", df_projetos["Nome Projeto"])
        descricao_atividade = st.text_area("Descri√ß√£o da Atividade")
        status_atividade = st.selectbox("Status da Atividade", ["N√£o Iniciada", "Em Andamento", "Conclu√≠da"])
    
        submitted = st.form_submit_button("üíæ Salvar Atividade")
        if submitted:
            if not nome_atividade:
                st.warning("‚ö†Ô∏è O nome da atividade √© obrigat√≥rio.")
            else:
                if nome_atividade in df_atividades["Nome Atividade"].values:
                    st.warning("‚ö†Ô∏è J√° existe uma atividade com este nome.")
                else:
                    nova = pd.DataFrame({
                        "Nome Atividade": [nome_atividade.strip()],
                        "Projeto Vinculado": [projeto_vinculado.strip()],
                        "Descri√ß√£o": [descricao_atividade.strip()],
                        "Status": [status_atividade]
                    })
                    df_atividades = pd.concat([df_atividades, nova], ignore_index=True)
                    salvar_arquivo(df_atividades, "atividades.csv")
                    st.success("‚úÖ Atividade cadastrada com sucesso!")
    
    st.dataframe(df_atividades, use_container_width=True)
    
    # üõ†Ô∏è Edi√ß√£o e Exclus√£o de Atividade
    st.markdown("### üîß Editar ou Excluir Atividade")
    if not df_atividades.empty:
        atividade_selecionada = st.selectbox("Selecione a Atividade:", df_atividades["Nome Atividade"])
    
        atividade_info = df_atividades[df_atividades["Nome Atividade"] == atividade_selecionada].iloc[0]
    
        novo_nome = st.text_input("Novo Nome da Atividade", value=atividade_info["Nome Atividade"])
        novo_projeto = st.selectbox("Novo Projeto Vinculado", df_projetos["Nome Projeto"], index=df_projetos["Nome Projeto"].tolist().index(atividade_info["Projeto Vinculado"]))
        nova_desc = st.text_area("Nova Descri√ß√£o", value=atividade_info["Descri√ß√£o"])
        novo_status = st.selectbox("Novo Status", ["N√£o Iniciada", "Em Andamento", "Conclu√≠da"], index=["N√£o Iniciada", "Em Andamento", "Conclu√≠da"].index(atividade_info["Status"]))
    
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úèÔ∏è Atualizar Atividade"):
                df_atividades.loc[df_atividades["Nome Atividade"] == atividade_selecionada, "Nome Atividade"] = novo_nome.strip()
                df_atividades.loc[df_atividades["Nome Atividade"] == atividade_selecionada, "Projeto Vinculado"] = novo_projeto.strip()
                df_atividades.loc[df_atividades["Nome Atividade"] == atividade_selecionada, "Descri√ß√£o"] = nova_desc.strip()
                df_atividades.loc[df_atividades["Nome Atividade"] == atividade_selecionada, "Status"] = novo_status
                salvar_arquivo(df_atividades, "atividades.csv")
                st.success("‚úÖ Atividade atualizada com sucesso!")
                st.experimental_rerun()
    
        with col2:
            if st.button("üóëÔ∏è Excluir Atividade"):
                confirmar = st.radio("‚ö†Ô∏è Tem certeza que deseja excluir?", ["N√£o", "Sim"], horizontal=True)
                if confirmar == "Sim":
                    df_atividades = df_atividades[df_atividades["Nome Atividade"] != atividade_selecionada]
                    salvar_arquivo(df_atividades, "atividades.csv")
                    st.success("‚úÖ Atividade exclu√≠da com sucesso!")
                    st.experimental_rerun()

# -----------------------------
# Menu Lan√ßamento TS
# -----------------------------

elif menu == "üìù Lan√ßamento de Timesheet":
    st.title("üìù Lan√ßamento de Timesheet")
    st.subheader("‚è±Ô∏è Registro de Horas")

    usuario_logado = st.session_state.username
    nome_usuario = users[usuario_logado]["name"]

    # üî∏ Carregar Bases
    df_empresas = carregar_arquivo("empresas.csv", ["Codigo SAP", "Nome Empresa", "Descri√ß√£o"])
    df_projetos = carregar_arquivo("projetos.csv", ["Nome Projeto", "Descri√ß√£o", "Status", "Time"])
    df_atividades = carregar_arquivo("atividades.csv", ["Nome Atividade", "Projeto Vinculado", "Descri√ß√£o", "Status"])
    df_timesheet = carregar_arquivo(
        "timesheet.csv",
        ["Usu√°rio", "Nome", "Data", "Empresa", "Projeto", "Time", "Atividade", "Quantidade", "Horas Gastas", "Observa√ß√µes"]
    )
    df_timesheet = normalizar_coluna_horas(df_timesheet)
    df_timesheet = padronizar_coluna_data(df_timesheet)

    # üî∏ Sele√ß√£o de Projeto e Atividade
    projeto = st.selectbox(
        "Projeto",
        sorted(df_projetos["Nome Projeto"].unique()) if not df_projetos.empty else ["Sem projetos cadastrados"]
    )
    
    df_atividades_filtrado = df_atividades[df_atividades["Projeto Vinculado"] == projeto]
    atividade = st.selectbox(
        "Atividade",
        sorted(df_atividades_filtrado["Nome Atividade"].unique()) if not df_atividades_filtrado.empty else ["Sem atividades para este projeto"]
    )

    time_opcao = st.selectbox(
        "Time",
        sorted(df_projetos[df_projetos["Nome Projeto"] == projeto]["Time"].unique()) if not df_projetos.empty else ["Sem projetos cadastrados"]
    )

    # üî∏ Formul√°rio de Lan√ßamento
    with st.form("form_timesheet"):
        data = st.date_input("Data", value=date.today())

        empresa = st.selectbox(
            "Empresa (C√≥digo SAP)",
            sorted(df_empresas["Codigo SAP"].unique()) if not df_empresas.empty else ["Sem empresas cadastradas"]
        )

        quantidade = st.number_input("Quantidade Tarefas", min_value=0, step=1)

        tempo = st.time_input("Horas Gastas", value=time(0, 0))  # <-- Valor padr√£o 00:00
        horas = f"{tempo.hour:02d}:{tempo.minute:02d}"

        observacoes = st.text_area("Observa√ß√µes", placeholder="Descreva detalhes relevantes sobre este lan√ßamento...")

        submitted = st.form_submit_button("üíæ Registrar")

        if submitted:
            if horas == "00:00":
                st.warning("‚ö†Ô∏è O campo Horas Gastas n√£o pode ser 00:00.")
            else:
                novo = pd.DataFrame({
                    "Usu√°rio": [usuario_logado],
                    "Nome": [nome_usuario],
                    "Data": [data.strftime("%d/%m/%Y")],
                    "Empresa": [empresa],
                    "Projeto": [projeto],
                    "Time": [time_opcao],
                    "Atividade": [atividade],
                    "Quantidade": [quantidade],
                    "Horas Gastas": [horas],
                    "Observa√ß√µes": [observacoes.strip()]
                })
                df_timesheet = pd.concat([df_timesheet, novo], ignore_index=True)
                salvar_arquivo(df_timesheet, "timesheet.csv")
                st.success("‚úÖ Registro salvo no Timesheet com sucesso!")

# -----------------------------
# Menu Visualizar TS
# -----------------------------

elif menu == "üìÑ Visualizar / Editar Timesheet":
    st.title("üìÑ Visualizar, Editar ou Excluir Timesheet")

    usuario_logado = st.session_state.username
    nome_usuario = users[usuario_logado]["name"]

    # üî∏ Carregar Dados
    df_timesheet = carregar_arquivo(
        "timesheet.csv",
        ["Usu√°rio", "Nome", "Data", "Empresa", "Projeto", "Time", "Atividade", "Quantidade", "Horas Gastas", "Observa√ß√µes"]
    )
    df_timesheet = normalizar_coluna_horas(df_timesheet)
    df_timesheet = padronizar_coluna_data(df_timesheet)
    
    # üîß Tratamento de datas
    if not df_timesheet.empty:
        df_timesheet["Data"] = pd.to_datetime(df_timesheet["Data"], errors="coerce")
    
    # üîê Filtrar por usu√°rio logado
    usuario_logado = st.session_state.username
    
    if usuario_logado not in admin_users:
        df_timesheet = df_timesheet[df_timesheet["Usu√°rio"] == usuario_logado]
    
    # üîç Filtros
    st.sidebar.subheader("üîç Filtros")
    
    data_inicial, data_final = st.sidebar.date_input(
        "Per√≠odo:",
        [
            df_timesheet["Data"].min().date() if not df_timesheet.empty else date.today(),
            df_timesheet["Data"].max().date() if not df_timesheet.empty else date.today()
        ]
    )
    
    empresa = st.sidebar.selectbox(
        "Empresa:",
        ["Todas"] + sorted(df_timesheet["Empresa"].dropna().unique().tolist()) if not df_timesheet.empty else ["Todas"]
    )
    
    projeto = st.sidebar.selectbox(
        "Projeto:",
        ["Todos"] + sorted(df_timesheet["Projeto"].dropna().unique().tolist()) if not df_timesheet.empty else ["Todos"]
    )

    time = st.sidebar.selectbox(
        "Time:",
        ["Todos"] + sorted(df_timesheet["Time"].dropna().unique().tolist()) if not df_timesheet.empty else ["Todos"]
    )
    
    atividade = st.sidebar.selectbox(
        "Atividade:",
        ["Todas"] + sorted(df_timesheet["Atividade"].dropna().unique().tolist()) if not df_timesheet.empty else ["Todas"]
    )
    
    # Filtro de usu√°rio (apenas admins veem)
    if usuario_logado in admin_users:
        usuario = st.sidebar.selectbox(
            "Nome:",
            ["Todos"] + sorted(df_timesheet["Nome"].dropna().unique().tolist()) if not df_timesheet.empty else ["Todos"]
        )
    else:
        usuario = usuario_logado
    
    # üî∏ Aplicando filtros
    df_filtrado = df_timesheet.copy()
    
    if empresa != "Todas":
        df_filtrado = df_filtrado[df_filtrado["Empresa"] == empresa]
    
    if projeto != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Projeto"] == projeto]

    if time != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Time"] == time]
    
    if atividade != "Todas":
        df_filtrado = df_filtrado[df_filtrado["Atividade"] == atividade]
    
    if usuario != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Usu√°rio"] == usuario]

    df_filtrado["Data"] = pd.to_datetime(df_filtrado["Data"], errors="coerce")
    df_filtrado = df_filtrado[
        (df_filtrado["Data"].dt.date >= data_inicial) &
        (df_filtrado["Data"].dt.date <= data_final)
    ].sort_values(by="Data")
    
    # üî∏ Visualiza√ß√£o
    df_filtrado["Data"] = df_filtrado["Data"].dt.strftime("%d/%m/%Y")
    st.markdown(f"### üîç {len(df_filtrado)} registros encontrados")
    st.dataframe(df_filtrado, use_container_width=True)
    
    # üî∏ Edi√ß√£o
    st.markdown("---")
    st.subheader("‚úèÔ∏è Editar um Registro")
    
    if not df_filtrado.empty:
        indice = st.selectbox("Selecione o √≠ndice para editar:", df_filtrado.index.tolist())
    
        linha = df_filtrado.loc[indice]
    
        col_editar = st.selectbox("Coluna:", [
            "Data", "Nome", "Empresa", "Projeto", "Atividade", "Quantidade", "Horas Gastas", "Observa√ß√µes"
        ])
    
        valor_atual = linha[col_editar]
        if col_editar == "Data":
            novo_valor = st.date_input("Nova Data", value=valor_atual.date() if pd.notnull(valor_atual) else date.today())
            novo_valor = pd.to_datetime(novo_valor)
        elif col_editar == "Quantidade":
            novo_valor = st.number_input("Nova Quantidade", value=int(valor_atual) if pd.notnull(valor_atual) else 0)
        else:
            novo_valor = st.text_input("Novo Valor", value=str(valor_atual) if pd.notnull(valor_atual) else "")
    
        if st.button("üíæ Atualizar Registro"):
            df_timesheet.at[indice, col_editar] = novo_valor
            salvar_arquivo(df_timesheet, "timesheet.csv")
            st.success(f"‚úÖ Registro atualizado com sucesso!")
            st.experimental_rerun()
    
    # üî∏ Exclus√£o
    st.markdown("---")
    st.subheader("üóëÔ∏è Excluir um Registro")
    
    if not df_filtrado.empty:
        indice_excluir = st.selectbox("√çndice para excluir:", df_filtrado.index.tolist(), key="excluir")
    
        linha = df_filtrado.loc[indice_excluir]
        st.markdown("**Registro selecionado:**")
        st.json(linha.to_dict())
    
        confirmar = st.radio("‚ö†Ô∏è Confirmar Exclus√£o?", ["N√£o", "Sim"], horizontal=True, key="confirmar_excluir")
    
        if confirmar == "Sim":
            if st.button("üóëÔ∏è Confirmar Exclus√£o"):
                df_timesheet = df_timesheet.drop(index=indice_excluir)
                salvar_arquivo(df_timesheet, "timesheet.csv")
                st.success("‚úÖ Registro exclu√≠do com sucesso!")
                st.experimental_rerun()
    
    # üî∏ Exporta√ß√£o
    st.markdown("---")
    st.subheader("üì• Exportar Dados")
    
    buffer = df_filtrado.to_csv(index=False, sep=";", encoding="utf-8-sig").encode()
    
    st.download_button(
        label="üì• Baixar CSV Filtrado",
        data=buffer,
        file_name="timesheet_filtrado.csv",
        mime="text/csv"
    )

# -----------------------------
# Menu Performance
# -----------------------------

elif menu == "üìä Avalia√ß√£o de Performance ‚Äî IA":
    st.title("üìä Avalia√ß√£o de Performance com IA")

    # üîê Definir admins
    usuario_logado = st.session_state.username
    
    # üîó Carregar Dados
    df_timesheet = carregar_arquivo(
        "timesheet.csv",
        ["Usu√°rio", "Nome", "Data", "Empresa", "Projeto", "Time", "Atividade", "Quantidade", "Horas Gastas", "Observa√ß√µes"]
    )
    df_timesheet = normalizar_coluna_horas(df_timesheet)
    
    if df_timesheet.empty:
        st.info("‚ö†Ô∏è N√£o h√° dados no timesheet para avaliar.")
        st.stop()
    
    # Tratamento de datas
    df_timesheet["Data"] = pd.to_datetime(df_timesheet["Data"], errors="coerce")
    
    # üîê Controle de Permiss√£o
    if usuario_logado not in admin_users:
        st.error("üö´ Voc√™ n√£o tem permiss√£o para acessar a Avalia√ß√£o de Performance.")
        st.stop()
    
    # üîç Filtro por Projeto
    st.markdown("### ü§ñ Gerando relat√≥rio com IA")
    
    lista_projetos = sorted(df_timesheet["Projeto"].dropna().unique().tolist())
    projeto_escolhido = st.selectbox(
        "Selecione o Projeto para an√°lise:",
        ["Todos os Projetos"] + lista_projetos
    )
    
    # Aplicar filtro
    if projeto_escolhido != "Todos os Projetos":
        df_filtrado = df_timesheet[df_timesheet["Projeto"] == projeto_escolhido]
    else:
        df_filtrado = df_timesheet.copy()
    
    if df_filtrado.empty:
        st.info("‚ö†Ô∏è Nenhum registro encontrado para o projeto selecionado.")
        st.stop()
    
    # ü§ñ Cliente OpenAI
    client = OpenAI(api_key=st.secrets["openai"]["api_key"])
    
    # üî• Gera√ß√£o do Relat√≥rio
    dados_markdown = df_filtrado.fillna("").astype(str).to_markdown(index=False)
    
    prompt = f"""
    Voc√™ √© um consultor especialista em gest√£o de tempo, produtividade e an√°lise de performance.
    
    Analise os dados do timesheet abaixo e gere um relat√≥rio completo e estruturado contendo:
    - ‚úÖ Resumo executivo
    - ‚úÖ Principais indicadores
    - ‚úÖ Gargalos e desvios
    - ‚úÖ Recomenda√ß√µes de melhorias operacionais
    - ‚úÖ Conclus√µes finais
    
    Seja objetivo, t√©cnico e claro. Utilize contagens, percentuais e an√°lises de tend√™ncia.
    
    ### Dados do Timesheet:
    {dados_markdown}
    """
    
    if st.button("üöÄ Gerar Relat√≥rio de Performance"):
        with st.spinner("A IA est√° gerando o relat√≥rio..."):
            resposta = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de produtividade corporativa e performance."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2
            )
    
            texto_relatorio = resposta.choices[0].message.content
    
            st.success("‚úÖ Relat√≥rio gerado com sucesso!")
            st.markdown("### üìÑ Relat√≥rio Gerado:")
            st.markdown(texto_relatorio)
    
            # =============================
            # üìÑ Gerar Arquivo .docx
            # =============================
            doc = Document()
    
            # Estilo
            style = doc.styles["Normal"]
            font = style.font
            font.name = 'Arial'
            font.size = Pt(11)
    
            doc.add_heading("üìä Relat√≥rio de Avalia√ß√£o de Performance", level=1)
    
            if projeto_escolhido == "Todos os Projetos":
                doc.add_paragraph("Projeto: Todos os Projetos")
            else:
                doc.add_paragraph(f"Projeto: {projeto_escolhido}")
    
            doc.add_paragraph(f"Data da gera√ß√£o: {datetime.today().strftime('%Y-%m-%d')}")
    
            doc.add_paragraph("\n")
    
            for linha in texto_relatorio.split("\n"):
                if linha.strip().startswith("#"):
                    nivel = linha.count("#")
                    texto = linha.replace("#", "").strip()
                    doc.add_heading(texto, level=min(nivel, 4))
                else:
                    doc.add_paragraph(linha.strip())
    
            buffer = BytesIO()
            doc.save(buffer)
            buffer.seek(0)
    
            st.download_button(
                label="üì• Baixar Relat√≥rio em Word",
                data=buffer,
                file_name="relatorio_performance.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
